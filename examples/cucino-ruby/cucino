#!/usr/bin/env ruby

require 'gherkin'
require 'rspec/expectations'

class Scenario
  attr_reader :uri, :steps
  attr_accessor :tags

  def initialize(uri, *steps)
    @uri = uri
    @steps = steps
  end

  def each(&block)
    @steps.each(&block)
  end
end

class Reporter
  attr_reader :scenarios, :results

  def initialize(scenarios)
    @scenarios = scenarios
    @results = {}
  end

  def scenario_count
    scenarios.count
  end

  def step_count
    scenarios.inject(0) { |acc, scenario| acc + scenario.steps.count }
  end

  def record(scenario, result)
    results[scenario] = result
  end

  def print_results(output)
    output.puts "Results: Scenarios - #{scenario_count}, Steps - #{step_count}"
    results.each do |scenario, result|
      output.puts "#{scenario}: #{result}"
    end
  end
end

class Context
  include RSpec::Matchers

  attr_reader :mappings, :result

  def initialize(mappings)
    @mappings = mappings
    @result = :not_executed
  end

  def execute(scenario)
    scenario.each do |step|
      mapping = mappings.find do |from, to|
        from == step[0]
      end || raise("Can't find mapping for #{step}")
      instance_exec(step.last, &mapping.last)
    end
    @result = :passed
  rescue RSpec::Expectations::ExpectationNotMetError
    @result = :failed
  end
end

class Executor
  attr_reader :reporter, :mappings

  def initialize(reporter)
    @reporter = reporter
    @mappings = {}
  end

  def map(step, &body)
    mappings[step] = body
  end

  def execute(scenarios)
    scenarios.each do |scenario|
      ctx = Context.new(mappings)
      ctx.execute(scenario)
      reporter.record(scenario.uri, ctx.result)
    end
  end
end

class Builder
  attr_reader :scenarios

  def initialize
    @bg_steps = []
    @body_steps = []
    @current = nil
    @scenarios = []
  end

  def record(uri, tags)
    @current = uri
    @current_tags = tags
  end

  def replay
    if @current
      actions = @bg_steps.dup + @body_steps
      scenario = Scenario.new(@current, *actions)
      scenario.tags = @current_tags
      scenarios.push(scenario)
      @body_steps = []
      @current = nil
      @current_tags = nil
    end
  end

  def add_step(parts)
    if @current
      @body_steps.push(parts)
    else
      @bg_steps.push(parts)
    end
  end
end


class Compiler
  def initialize(builder)
    @parser = ::Gherkin::Parser::Parser.new(self, true, "root", false)
    @builder = builder
  end

  def compile(content)
    uri_location = ""
    line_offset = 0
    @parser.parse(content, uri_location, line_offset)
  end

  def scenario(scenario)
    @builder.replay
    @builder.record(scenario.name, scenario.tags.collect(&:name))
  end

  def step(step)
    action = [step.name]
    action << step.doc_string.value if step.doc_string
    action << step.rows if step.rows
    @builder.add_step(action)
  end

  def eof
    @builder.replay
  end

  def method_missing(name, *args, &blk)
    #puts "name: #{name}, args: #{args}"
  end
end

class Calculator
  attr_reader :result

  def add(n)
    @result ||= 0
    @result += n
  end

  def multiply(n)
    @result ||= 1
    @result *= n
  end
end

if __FILE__ == $0
  gherkin = File.read(ARGV[0])
  builder = Builder.new
  compiler = Compiler.new(builder)
  compiler.compile(gherkin)
  scenarios = builder.scenarios
  reporter = Reporter.new(scenarios)
  if ARGV[0] == "execution.feature"
    executor = Executor.new(reporter)
    executor.map("a calculator") { @calculator = Calculator.new }
    executor.map("these numbers are summed together:") { |str| str.split.each { |n| @calculator.add(n.to_i) } }
    executor.map("the result is 6") { @calculator.result.should be(6) }
    executor.map("the result is 42") { @calculator.result.should be(42) }
    executor.map("these numbers are multiplied:") { |table| table.each { |row| @calculator.multiply(row.cells[0].to_i) } }
    executor.execute(scenarios)
  end
  reporter.print_results(STDOUT)
end
